import tkinter as tk
from tkinter import filedialog, messagebox
import re
import os

class DarkSyntaxCheckerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üîç V√©rificateur .hpp - Arma 3 Pacific Island - alharis thess")
        self.root.configure(bg="#1e1e1e")

        text_frame = tk.Frame(root, bg="#1e1e1e")
        text_frame.pack(fill="both", expand=True, padx=5, pady=5)

        self.line_numbers = tk.Text(
            text_frame, width=8, padx=5, takefocus=0, border=0,
            background="#252526", foreground="#858585", state="disabled",
            font=("Consolas", 12)
        )
        self.line_numbers.pack(side="left", fill="y")

        self.text = tk.Text(
            text_frame, wrap="none", font=("Consolas", 12),
            bg="#1e1e1e", fg="#d4d4d4", insertbackground="white",
            selectbackground="#264f78", borderwidth=0
        )
        self.text.pack(side="left", fill="both", expand=True)

        scrollbar = tk.Scrollbar(text_frame, command=self.on_scrollbar)
        scrollbar.pack(side="right", fill="y")
        self.text.config(yscrollcommand=self.on_textscroll)
        self.line_numbers.config(yscrollcommand=scrollbar.set)

        self.text.bind("<KeyRelease>", self.update_line_numbers)
        self.text.bind("<MouseWheel>", self.update_line_numbers)  # Windows scroll
        self.text.bind("<Button-4>", self.update_line_numbers)    # Linux scroll up
        self.text.bind("<Button-5>", self.update_line_numbers)    # Linux scroll down

        self.frame = tk.Frame(root, bg="#1e1e1e")
        self.frame.pack(fill="x")

        btn_style = {"font": ("Segoe UI", 10, "bold"), "bg": "#007acc", "fg": "white", "bd": 0, "padx": 10, "pady": 4}

        tk.Button(self.frame, text="üìÇ Charger .hpp", command=self.load_file, **btn_style).pack(side="left", padx=5, pady=5)
        tk.Button(self.frame, text="üîÅ Re-v√©rifier", command=self.recheck, **btn_style).pack(side="left", padx=5, pady=5)
        tk.Button(self.frame, text="üõ† Corriger", command=self.auto_fix, **btn_style).pack(side="right", padx=5, pady=5)

        self.current_content = ""
        self.file_path = ""
        self.error_lines = set()

    def on_scrollbar(self, *args):
        self.text.yview(*args)
        self.line_numbers.yview(*args)

    def on_textscroll(self, *args):
        self.line_numbers.yview_moveto(args[0])
        self.text.yview_moveto(args[0])
        return None

    def update_line_numbers(self, event=None):
        self.line_numbers.config(state="normal")
        self.line_numbers.delete("1.0", tk.END)

        line_count = int(self.text.index("end-1c").split(".")[0])
        lines_to_display = []
        for i in range(1, line_count + 1):
            prefix = "‚ùå " if i in self.error_lines else "   "
            lines_to_display.append(f"{prefix}{i}")
        self.line_numbers.insert("1.0", "\n".join(lines_to_display))
        self.line_numbers.config(state="disabled")

    def load_file(self):
        file_path = filedialog.askopenfilename(filetypes=[("Header files", "*.hpp")])
        if not file_path:
            return
        self.file_path = file_path

        with open(file_path, "r", encoding="utf-8") as file:
            self.current_content = file.read()
            self.text.delete("1.0", tk.END)
            self.text.insert(tk.END, self.current_content)
            self.recheck()
            self.update_line_numbers()

    def recheck(self):
        self.current_content = self.text.get("1.0", tk.END)
        self.error_lines.clear()
        self.text.tag_remove("error", "1.0", tk.END)
        self.text.tag_config("error", foreground="#f44747")

        errors = self.check_syntax(self.current_content)
        for line_num, message, clue in errors:
            self.error_lines.add(line_num)
            index_start = f"{line_num}.0"
            index_end = f"{line_num}.end"
            self.text.tag_add("error", index_start, index_end)

        self.update_line_numbers()

        if not errors:
            messagebox.showinfo("üëå Nickel", "Aucune erreur d√©tect√©e !")
        else:
            all_msgs = "\n".join(f"Ligne {line}: {msg}" for line, msg, _ in errors)
            messagebox.showerror("üö® Erreurs d√©tect√©es", all_msgs)

    def check_syntax(self, content):
        errors = []
        lines = content.splitlines()

        if content.count("{") != content.count("}"):
            errors.append((1, "Accolades d√©s√©quilibr√©es", "{"))

        pattern = r"stock\[\]\s*=\s*\{([\s\S]*?)\};"
        matches = re.finditer(pattern, content)

        for match in matches:
            start_pos = match.start()
            block = match.group(1)

            preceding_text = content[:start_pos]
            block_start_line = preceding_text.count('\n') + 1

            block_lines = block.splitlines()

            # Supprimer tous les commentaires multilignes et simples dans block avant analyse
            def remove_comments(text):
                # Supprime commentaires multilignes
                text_no_multiline = re.sub(r"/\*[\s\S]*?\*/", "", text)
                # Supprime commentaires simples //
                text_no_comments = re.sub(r"//.*", "", text_no_multiline)
                return text_no_comments

            block_text = "\n".join(block_lines)
            block_text_no_comments = remove_comments(block_text)
            lines_no_comments = block_text_no_comments.splitlines()

            cleaned = []
            for i, line_no_comment in enumerate(lines_no_comments):
                line_stripped = line_no_comment.strip()
                if line_stripped:
                    cleaned.append((i, line_stripped))

            for i, (idx, line) in enumerate(cleaned):
                true_line_no = block_start_line + idx + 1
                if i < len(cleaned) - 1 and not line.endswith(","):
                    errors.append((true_line_no, f"Virgule manquante apr√®s : {line}", line))
                elif i == len(cleaned) - 1 and line.endswith(","):
                    errors.append((true_line_no, f"Virgule inutile √† la fin : {line}", line))

        return errors

    def auto_fix(self):
        if not self.file_path:
            messagebox.showerror("Erreur", "Aucun fichier charg√©.")
            return

        content = self.text.get("1.0", tk.END)
        fixed = self.fix_commas(content)

        backup_path = self.file_path.replace(".hpp", "_backup.hpp")
        with open(backup_path, "w", encoding="utf-8") as f:
            f.write(content)

        with open(self.file_path, "w", encoding="utf-8") as f:
            f.write(fixed)

        self.text.delete("1.0", tk.END)
        self.text.insert("1.0", fixed)
        self.recheck()
        self.update_line_numbers()

        messagebox.showinfo(
            "‚úÖ Corrig√©",
            f"Les erreurs ont √©t√© corrig√©es.\nUn fichier de sauvegarde a √©t√© cr√©√© :\n{os.path.basename(backup_path)}"
        )

    def fix_commas(self, content):
        def process_block(block):
            lines = block.strip().splitlines()
            out = []
            for i, line in enumerate(lines):
                # Supprimer commentaires simples pour v√©rifier virgule
                line_clean = re.sub(r"//.*", "", line).strip()
                # Ne pas toucher les lignes vides
                if not line_clean:
                    out.append(line)
                    continue
                # V√©rifier virgules
                if i < len(lines) - 1:
                    if not line_clean.endswith(","):
                        line = line.rstrip() + ","
                elif line_clean.endswith(","):
                    line = line.rstrip().rstrip(",")
                out.append(line)
            return "\n".join(out)

        pattern = r"(stock\[\]\s*=\s*\{)([\s\S]*?)(\};)"
        def replacer(match):
            before, block, after = match.groups()
            fixed_block = process_block(block)
            return before + "\n" + fixed_block + "\n" + after

        return re.sub(pattern, replacer, content)


if __name__ == "__main__":
    root = tk.Tk()
    app = DarkSyntaxCheckerApp(root)
    root.mainloop()
